Клименко Кирилл "Тестовое задание на позицию Программист-стажёр"
1. Инкапсуляция - сокрытие логики программной сущности от вмешательств извне. В языке программирования Java она реализуется в основном через модификаторы доступа private, package, protected и public, обозначая таким образом рамки доступа к классу, методу или переменной.
Так например, если у нас есть класс Human, и у него есть переменная age, доступ к которой мы хотим установить исключительно внутри самого класса, мы можем поставить ей модификатор доступа private, а извне ее значение получать с помощью геттера:
public class Human {
  private int age;
  public int getAge() {
    return age;
  }
}
Наследование - концепция, согласно которой одни классы (называемые дочерними) могут базироваться на основе других классов (называемых родительскими). При этом дочерние классы перенимают свойства и поведение родительского класса. В Java реализуется посредством механизма наследования от одного (родительского) класса с помощью ключевого слова extends и последующего доступа к переменным, методам и конструкторам этого родительского класса, которые можно использовать в логике работы нового дочернего класса. Пример использования:
public class Animal{
  protected String name;
  protected void printName(){
    System.out.println(name);
  }
}
public class Tiger extends Animal
  private int age;
  public void printNameAge(){
    printName();
    System.out.println(age);
  }
}
Полиморфизм, или же многоформенность, - это различная реализация одной и той же функции разными объектами, то есть многообразие реализаций одного действия. В Java представлено наличием интерфейсов и абстрактных классов, а также возможностью переопределения методов родительского класса или интерфейса.
Пример использования:
public interface Moveable {
  void move();
}
public class Snake implements Moveable {
  @Override
  public void move(){
    System.out.println("Snake is crawling");
  }
}
public class Fish implements Moveable {
  @Override
  public void move(){
    System.out.println("Fish is crawling");
  }
}
2. Если я правильно понял, речь идет о той ситуации, когда пользователь уже совершил коммит, и в коммите была ошибка, следовательно нужно откатить последний коммит. В таком случае есть два способа откатить изменения последнего коммита. Первый это использовать комманду "git revert номер коммита(первые 7 цифр)". Данная комманда сдалет новый коммит, противоположный указанному, таким образом отменяет указанный коммит. Второй способ это использовать комманду "git reset опция(--soft, --hard, --mixed) HEAD~количество последних коммитов". Данная комманда просто отменяет последние n коммитов и восстанавливает измененные файлы в исходное состояние. 
Если же я понял неправильно и речь идет об обычных изменениях в рабочей директории до коммита, тогда все проще, достаточно использовать комманду "git restore имя файла", если файл еще не был внесен в индекс коммандой "git add", и "git restore --staged имя файла", если файлу уже был внесен в индексирование. Эта команда восстанавливает состояние файла соответственно последнему коммиту.
3. Функция для определения является ли строка палиндромом.
public static boolean isPalindrome(String line) {
        StringBuilder builder = new StringBuilder(line);
        return line.equalsIgnoreCase(builder.reverse().toString());
}
4. Касательно опыта в IT, больше года изучал Java на Java Rush и практиковался на задачах, недавно полностью завершил курс по всем модулям, параллельно учил Java самостоятельно посредством видеоуроков, статей, сайтам(в частности ORACLE), также подробно изучал Git, Apache Maven, JUnit, Log4J, Java Swing и много других фреймворков. Самостоятельно создал два полноценных проекта: HeadHunterParser - парсер сайта hh.ru, выводящий информацию о вакансии, доходе компании и тд, с графическим интерфейсом написанным на Java Swing, ядро выполнено с использованием библиотеки Jsoup; GazeboChat - многопользовательский чат, реализованный с использованием сервер-сокетной архитектуры и классов SeverSocket и Socket соответственно в своем ядре. Реализовал для чата и сервера графические оболочки через Java Swing.
Ссылка на мой GitHub:
https://github.com/Silent-Rider
